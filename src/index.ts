import { app, BrowserWindow,ipcMain,nativeTheme} from 'electron';
import * as dotenv from 'dotenv';

dotenv.config();
// (window as any).ProcessEnv = process.env
const os = require('os')

const { setupTitlebar, attachTitlebarToWindow } = require('custom-electron-titlebar/main');
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {

  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    frame:false,
    titleBarStyle: 'hidden',
    webPreferences: {
      sandbox: false,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      webSecurity: false
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  
  // Open the DevTools.
  mainWindow.webContents.openDevTools()
  attachTitlebarToWindow(mainWindow);
  ipcMain.handle('minimize', () => {mainWindow.minimize()})
  ipcMain.handle('maximize', () => {!mainWindow.isMaximized() ? mainWindow.maximize() : mainWindow.unmaximize()})
  ipcMain.handle('close', () => {mainWindow.close()})

};

/*
app.whenReady().then(async () => {

  session.defaultSession.loadExtension('C:\\Users\\Benois\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\\fmkadmapgofadopljbjfkapdkoienihi\\4.27.2_0')

})
*/

app.on('ready', ()=> 
{
  ipcMain.on('set-title', (event, title) => {
    const webContents = event.sender
    const win = BrowserWindow.fromWebContents(webContents)
    win.setTitle(title)
  });
  
  ipcMain.handle('dark-mode:toggle', () => {
    if (nativeTheme.shouldUseDarkColors) {
      nativeTheme.themeSource = 'light'
    } else {
      nativeTheme.themeSource = 'dark'
    }
    return nativeTheme.shouldUseDarkColors
  })

  ipcMain.handle('dark-mode:system', () => {
    nativeTheme.themeSource = 'system'
  })
  

//  app.commandLine.appendSwitch('disable-web-security');

  createWindow()
  

});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.

 /* session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
        responseHeaders: {
            ...details.responseHeaders,
            'Content-Security-Policy': ["default-src 'self' 'unsafe-inline'"]
        }
    });
  }); */

  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }

});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.


